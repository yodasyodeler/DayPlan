#include "image.h"

uint8_t imageNum = 0;
uint8_t infoNum = 0;
uint32_t ImageAddress = 2304000; //Frame 7

iImage* imageList[255];
iInfo* infoList[255];

uint16_t monochromeColor = BLACK;

/*  findID
 *    Helper Function for Finding an ID
 *    	On Success Returns Index
 *    	On Failure Returns -1
 */
int findID(uint32_t ID)
{
	int i;
	int comp = 0;

	for (i=0; i < infoNum && !comp; ++i)
		comp = ((imageList[i]->ID) == ID);

	return (comp ? i-1 : -1);
}

/*  findFrame
 *    Helper Function Next Image on Frame
 *    Can be reentrant with index arg
 *    	On Success Returns Index
 *    	On Failure Returns -1
 */
int findFrame(uint8_t frame, uint32_t index)
{
	int i;
	int comp = 0;

	for (i=index+1; i < infoNum && !comp; ++i)
		comp = (imageList[i]->frame == frame);

	return (comp ? i-1 : -1);
}

/*  findInfo
 *    Helper Function for Finding if an Image
 *    has Already been Loaded into Memory
 *    	On Success Returns Index
 *    	On Failure Returns -1
 */
int findInfo(const char fileName[8])
{
	int i;
	int comp = 0;

	for (i=0; i < infoNum && !comp; ++i)
		comp = (c_strcmp(infoList[i]->fileName, fileName) == 0);

	return (comp ? i-1 : -1);
}



/*  createImage
 *    Registers an Image
 *    If file is not on ram it is loaded in
 *    returns:
 *      re == 0 :  File Could Not Be Loaded
 *      re == -1: Failure to Allocate Memory
 *      re > 0  : ID of Image
 */
uint32_t createImage(const char fileName[8], const char fileExt[3], iInfo* info)
{
	int i;
	iImage* imageC = NULL;
	iInfo* infoC = NULL;
	bitmapHeader header;

	/* Didn't find Image */
	if ( (i =findInfo(fileName)) == -1){
		if (loadBitmap(fileName, fileExt,ImageAddress, &header))
			return 0;

		infoC = malloc(sizeof(iInfo));
		if (infoC == NULL)
			return -1;

		/* Populate New Image File Info */
		c_strcpy(infoC->fileName, fileName);
		infoC->cRes = header.pixelResolution;
		infoC->size = (header.size>>1);
		infoC->height = header.height;
		infoC->width = header.width;
		infoC->address = ImageAddress;
		ImageAddress += infoC->size;

		/* append new info */
		infoList[infoNum++] = infoC;
	}
	else{
		infoC = infoList[i];
	}

	imageC = malloc(sizeof(iImage));
	if (imageC == NULL)
		return -1;

	/* Populate New Image */
	imageC->info = infoC;
	imageC->x = 0;
	imageC->y = 0;
	imageC->layer = 0;
	imageC->frame = 0;
	imageC->scale = 0;

	imageList[imageNum++] = imageC;
	imageC->ID = imageNum;

	if (info != NULL)
		*info = *infoC;

	return imageC->ID;
}
uint32_t deleteImage(uint32_t ID)
{
	return 0;
}

void deleteAllImage()
{

}
void closeImage()
{

}



/* displayImage
  *    Displays a Image if ID matches
 *    an existing image In the List
 *    Takes in account
 *      scale, frame, x, y
 *    Does Not Account For Layer
 *    returns:
 *              0: Success
 *             -1: ID Not Found
 *             -2: Color Resolution Not Supported
 *    Calls:
 *      If monochrome: diplayMonochromeImage
 *      If RGB16 & scale 3: displayRGB16FastImage
 *      Else If RGB16: displayRGB16Image
 *
 *      RGB16 only supports 565 Format
 */
uint32_t displayImage(uint32_t ID)
{
	iImage* ptr = NULL;
	uint16_t scaleX, scaleY;
	uint8_t re = 0;
	int index;

	if ((index = findID(ID)) == -1)
			return index;

	ptr = imageList[index];

	scaleX = (ptr->scale&0xF0)>>4;
	scaleY = (ptr->scale&0x0F);

	if (scaleX && scaleY){
		switch (ptr->info->cRes)
		{
			case 1:
				re = displayMonochromeImage(ID);
				break;
			case 16:
				if (ptr->scale == 0x33)
					re = displayFastRGB16Image(ID);
				else
					re = displayRGB16Image(ID);
				break;
			default:
				re = -2;
		}
	}

	return re;

}

uint32_t displayMonochromeImage(uint32_t ID)
{
	return 0;
}

/*  displayRGB16Image
 *    Displays a Image if ID matches
 *    an existing image In the List
 *    Must BE A 16 Bit RGB Image
 *    Takes in account
 *      scale, frame, x, y
 *    Does Not Account For Layer
 *    returns:
 *              0: Success
 *             -1: ID Not Found
 */
uint32_t displayRGB16Image(uint32_t ID)
{
	int index;
	int i, j;
	int x, y;
	iImage* ptr = NULL;
	uint8_t divX, divY;
	uint8_t multX = 1;
	uint8_t multY = 1;
	uint16_t pixel;
	uint16_t inX, inY;

	uint32_t fAddress;
	uint32_t pixelOffset;

	if ((index = findID(ID)) == -1)
		return index;

	ptr = imageList[index];

	divX = (ptr->scale&0xF0)>>4;
	divY = (ptr->scale&0x0F);

	inY = ptr->y;

	fAddress = ((ptr->frame)*FRAMESIZE);

	if (divX < 3)
		divX = (4-divX);
	else{
		multX = divX - 2;
		divX = 1;
	}

	if (divY < 3)
		divY = (4-divY);
	else{
		multY = divY - 2;
		divY = 1;
	}

	/* Iterate Pixels
	 *   Outer Loops Traverses pixels in Ram
	 *   Scale Affects Traversal if below 3
	 */
	for(i=0; i < ptr->info->height && inY < COLSIZE; i += divY){
		//iterate this loop for increase in y
		for(y=0; y<multY; ++y){
			inX = ptr->x;
			pixelOffset = ((inY)*(ROWSIZE)) + fAddress;
			for(j=0; j < ptr->info->width && inX < ROWSIZE; j +=divX){
				//Read Pixel
				pixel = IORD(NEW_SDRAM_CONTROLLER_0_BASE, ptr->info->address + (i*ptr->info->width) + j);
				//iterate this loop for increase in x
				for(x=0; x < multX; ++x){
					IOWR(NEW_SDRAM_CONTROLLER_0_BASE, pixelOffset + inX++, pixel);
				}
			}
			++inY;
		}
	}

	return 0;
}

/*  displayRGBFast16Image
 *    Displays a Image if ID matches
 *    an existing image In the List
 *    Must BE A 16 Bit RGB Image
 *    Takes in account
 *      frame, x, y
 *    Does Not Account For Layer
 *    Ignores Scale conditions
 *    returns:
 *              0: Success
 *             -1: ID Not Found
 */
uint32_t displayFastRGB16Image(uint32_t ID)
{
	int index;
	int i, j;
	iImage* ptr = NULL;
	uint16_t pixel;

	uint32_t fAddress;
	uint32_t pixelOffset;

	if ((index = findID(ID)) == -1)
		return index;

	ptr = imageList[index];

	fAddress = ((ptr->frame)*FRAMESIZE);

	for(i=0; i < ptr->info->height; ++i){
		pixelOffset = (((ptr->y+i)*ROWSIZE)+ptr->x) + fAddress;
		for(j=0; j < ptr->info->width; ++j){
			pixel = IORD(NEW_SDRAM_CONTROLLER_0_BASE, ptr->info->address + (i*ptr->info->width) + j);
			IOWR(NEW_SDRAM_CONTROLLER_0_BASE, pixelOffset + j, pixel);
		}
	}

	return 0;
}

/*  displayFont16Image
 *    Displays a font of a color and scale
 *    Uses Image system to allow for change of
 *    font
 *    Font Must be 16x16
 *    returns:
 *             0>=: kern value for kerning text
 *             -1: ID Not Found
 *    If Image is not a Font Operation is undefined
 */
uint32_t displayFont16Image(unsigned char c,FontCursor cursor)
{
	int address;
	int fAddress = (FRAMEADDRSIZE*cursor.frame)+xyLocation(cursor.x,cursor.y);
	uint16_t kern = 0;
	uint16_t row;
	int i, j, x, y;
	uint8_t scaleX, scaleY;
	uint16_t inX, inY;
	int index;
	iImage* ptr = NULL;
	uint32_t pixelOffset;

	if ((index = findID(cursor.ID)) == -1)
			return index;

	ptr = imageList[index];
	address = ptr->info->address + (((c-32)/(ptr->info->width>>4))*(ptr->info->width)) + ((c-32)%(ptr->info->width>>4));

	inY = cursor.y;

	scaleX = (cursor.scale&0xF0)>>4;
	scaleY = (cursor.scale&0x0F);

	for (i=0;i<16; ++i){
		row = IORD( NEW_SDRAM_CONTROLLER_0_BASE, address + i*((ptr->info->width)>>4) );
		for(y=0; y<scaleY; ++y){ //scale y
			inX = 0;
			pixelOffset = ((inY)*(ROWSIZE)) + fAddress;
			for (j=0; j<16; ++j ){
				if ((row<<j) &0x8000){
					for(x = 0; x <scaleX; ++x){ //scale x
						IOWR(NEW_SDRAM_CONTROLLER_0_BASE, pixelOffset + inX + x, cursor.color);
						if (j > kern)
							kern = j;
					}
				}
				inX+=scaleX;
			}
			++inY;
		}
	}
	return kern*scaleX;
}

/*  displayFont64Image
 *    Displays a font of a color and scale
 *    Uses Image system to allow for change of
 *    font
 *    Font Must be 16x16
 *    returns:
 *             0>=: kern value for kerning text
 *             -1: ID Not Found
 *    If Image is not a Font Operation is undefined
 */
uint32_t displayFont64Image(unsigned char c, FontCursor cursor)
{
	int address;
	int fAddress = (FRAMEADDRSIZE*cursor.frame)+xyLocation(cursor.x,cursor.y);
	uint16_t kern = 0;
	int i, j, x, y;
	uint8_t scaleX, scaleY;
	uint16_t inX, inY;
	int index;
	iImage* ptr = NULL;
	uint32_t pixelOffset;
	uint64_t pixel;

	if ((index = findID(cursor.ID)) == -1)
			return index;

	ptr = imageList[index];
	address = ptr->info->address + (((c-32)/(ptr->info->width>>6))*(ptr->info->width)) + (((c-32)%(ptr->info->width>>6))<<6);

	inY = cursor.y;

	scaleX = (cursor.scale&0xF0)>>4;
	scaleY = (cursor.scale&0x0F);

	for (i=0; i<(64<<4); i+=4){
		pixel  =  IORD( NEW_SDRAM_CONTROLLER_0_BASE, address + i*((ptr->info->width)>>6) );
		pixel |= ((uint64_t)IORD( NEW_SDRAM_CONTROLLER_0_BASE, address + i*((ptr->info->width)>>4) + 1 ) << 16);
		pixel |= ((uint64_t)IORD( NEW_SDRAM_CONTROLLER_0_BASE, address + i*((ptr->info->width)>>4) + 2 ) << 32);
		pixel |= ((uint64_t)IORD( NEW_SDRAM_CONTROLLER_0_BASE, address + i*((ptr->info->width)>>4) + 3 ) << 48);
		for(y=0; y<scaleY; ++y){ //scale y
			inX = 0;
			pixelOffset = ((inY)*(ROWSIZE)) + fAddress;
			for (j=0; j<64; ++j ){
				if ((pixel<<j) & 0x80000000){
					for(x = 0; x <scaleX; ++x){ //scale x
						IOWR(NEW_SDRAM_CONTROLLER_0_BASE, pixelOffset + inX + x, cursor.color);
						if (j > kern)
							kern = j;
					}
				}
				inX+=scaleX;
			}
			++inY;
		}
	}
	return kern*scaleX;
}

void displayFrameImage(uint8_t frame)
{

}

uint32_t setLayerImage(uint32_t ID, uint8_t layer)
{
	int index;
	if ((index = findID(ID)) == -1)
			return index;

	imageList[index]->layer = layer;

	return 0;
}
uint32_t setScaleImage(uint32_t ID, uint8_t scaleX, uint8_t scaleY)
{
	int index;
	if ((index = findID(ID)) == -1)
			return index;

	imageList[index]->scale = ((scaleX<<4)|scaleY);

	return 0;
}
uint32_t setFrameImage(uint32_t ID, uint8_t frame)
{
	int index;
	if ((index = findID(ID)) == -1)
			return index;

	imageList[index]->frame = frame;

	return 0;
}
uint32_t moveImage(uint32_t ID, uint16_t x, uint16_t y)
{
	int index;
	if ((index = findID(ID)) == -1)
			return index;

	imageList[index]->x = x;
	imageList[index]->y = y;

	return 0;
}

uint32_t getInfoImage(uint32_t ID, const iInfo* info)
{
	int index;
	if ((index = findID(ID)) == -1)
			return index;

	info = imageList[index]->info;
	return 0;
}
