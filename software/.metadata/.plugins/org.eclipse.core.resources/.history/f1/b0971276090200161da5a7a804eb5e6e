#include "image.h"

uint32_t imageNum = 0;
uint32_t infoNum = 0;

iImage* imageList = NULL;
iInfo* infoList = NULL;

/*  findID
 *    Helper Function for Finding an ID
 *    	On Success Returns Index
 *    	On Failure Returns -1
 */
int findID(uint32_t ID)
{

}

/*  findFrame
 *    Helper Function Next Image on Frame
 *    Can be reentrant with index arg
 *    	On Success Returns Index
 *    	On Failure Returns -1
 */
int findFrame(uint8_t frame, uint32_t index)
{

}

/*  findInfo
 *    Helper Function for Finding if an Image
 *    has Already been Loaded into Memory
 *    	On Success Returns Index
 *    	On Failure Returns -1
 */
int findInfo(const char fileName[8], const char fileExt[3])
{
	int i;
	int comp = 0;

	for (i=0; i < infoNum && !comp; ++i)
	{
		comp = (c_strcmp(infoList[i]., fileName) == 0) && (infoList[i])
	}

	return i;
}


uint32_t createImage(const char fileName[8], const char fileExt[3], const iImage* info)
{
	iImage image;



	return image.ID;
}
uint32_t deleteImage(uint32_t ID)
{
	return 0;
}

void deleteAllImage()
{

}
void closeImage()
{

}

uint32_t displayImage(uint32_t ID)
{
	return 0;
}
void displayFrameImage(uint8_t frame)
{

}

uint32_t setLayerImage(uint32_t ID, uint8_t layer)
{
	return 0;
}
uint32_t setScaleImage(uint32_t ID, uint8_t scale)
{
	return 0;
}
uint32_t setFrame(uint32_t ID, uint8_t frame)
{
	return 0;
}
uint32_t moveImage(uint32_t ID, uint16_t x, uint16_t y)
{
	return 0;
}

uint32_t getInfoImage(uint32_t ID, const iImage* image)
{
	return 0;
}
