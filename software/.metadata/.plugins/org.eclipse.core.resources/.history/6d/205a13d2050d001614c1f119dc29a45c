#include <stdio.h>
#include <unistd.h>
#include "common.h"
#include "drawLib.h"
#include "FAT16SD.h"
#include "i2cAvalon.h"
#include "TouchI2C.h"
#include "fontWriterSD.h"
#include "ClockI2C.h"
#include "calendar.h"
#include "altera_avalon_timer_regs.h"
#include "sys/alt_irq.h"
#include "priv/alt_legacy_irq.h"
#include "image.h"
#include "clock.h"


void initDrivers();

volatile int timeNew = 0;
volatile int timeOld = 0;

void handle_timer_interrupt(void* isr_context);
void handle_i2c_interrupt(void* isr_context);

void (*timerFunc)(void) = NULL;
void (*touchFunc)(void) = NULL;

int main()
{
	//int ID;
	printf("hello from main\n");
	initDrivers();


	flipFrame(0);
	//drawFrame(DARKGREY, 0);

//	printk("#!Hello World!\n");
//	setScaleFont(2,2);
//	printk("#!Hello World!\n");
//	setScaleFont(1,2);
//	printk("#!Hello World!\n");

//	ID = createImage("PIP     ", "BMP", NULL);
//
//	setScaleImage(ID, 3, 3);
//	setWindowImage(ID, 400, 0, 800, 240);
//	moveImage(ID,0,240);
//	displayImage(ID);
//
//	setScaleImage(ID, 3, 3);
//	setWindowImage(ID, 0, 0, 400, 240);
//	moveImage(ID,400,240);
//	displayImage(ID);
//
//	setScaleImage(ID, 3, 3);
//	setWindowImage(ID, 400, 240, 800, 480);
//	moveImage(ID, 0, 0);
//	displayImage(ID);
//
//	setScaleImage(ID, 3, 3);
//	setWindowImage(ID, 0, 240, 400, 480);
//	moveImage(ID, 400, 0);
//	displayImage(ID);

	for(;;);

	return 0;
}

void initDrivers()
{
	IOWR(LCDFRAMEBUFFER_0_BASE, 1, 4);
	initTouchI2C();
	if (sdMount() != 0)
		while(1);
	if (initFontMap("NEWROMAN", "BMP") <= 0)
		while(1);
	initClock(0);
	timerFunc = displayTimerClock;
	touchFunc = editTouchClock;
	  // register the timer irq to be serviced by handle_timer_interrupt() function
	alt_irq_register(TIMER_0_IRQ, 0, handle_timer_interrupt);
	alt_irq_register(I2C_AVALON_0_IRQ, 0, handle_i2c_interrupt);

	IOWR(TIMER_0_BASE, 3, 1);		//Load Period
	IOWR(TIMER_0_BASE, 1, 7 );	//Start Timer and Interrupt Enable
	IOWR(I2CADDR, 1, 3);	//Start Timer and Interrupt Enable
}

void handle_timer_interrupt(void* isr_context)
{
	IOWR(TIMER_0_BASE, 0, 0 );	//Clear interrupt timer

   // your isr code here

	if (timerFunc != NULL)
		timerFunc();

	IOWR(TIMER_0_BASE, 0, 0 );	//Clear interrupt timer
	IOWR(TIMER_0_BASE, 3, 1);		//Load Period
}
void handle_i2c_interrupt(void* isr_context)
{
	IOWR(I2C_AVALON_0_BASE, 1, 3 );	//Clear interrupt timer

	if (touchFunc != NULL)
		touchFunc();
	refreshScreen();
}


