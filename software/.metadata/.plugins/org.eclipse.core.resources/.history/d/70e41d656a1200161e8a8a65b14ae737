#include "fontWriterSD.h"

iInfo fInfo;
FontCursor fontCursor;
node* fontList = NULL;

/* initFontMap
 *    Brief:
 *        Loads a Bitmap to use as a font into SDRAM
 *
 *    Populates:
 *      fontIDs for current font
 *      increments fontNum on successful
 *
 *    Summary:
 *        Loads the monochrome font bitmap into
 *        SDRAM. Uses Image library to accomplish this
 *
 *    Returns:
 *      re ==-2 : Font limit of 5 has Already Been Reached
 *      re == 0 : File Could Not Be Loaded
 *      re == -1: Failure to Allocate Memory
 *      re > 0  : ID of Font Image
 */
int initFontMap(char fileName[8], char fileExt[3])
{
	uint32_t temp;
	if ( (temp = createImage(fileName,fileExt, &fInfo)) <= 0)
		return temp;

	if (searchNode(&fontList))
		addNode(&fontList,


	fontCursor.ID = fontIDs[fontNum];
	fontCursor.scale = 0x11;

	return fontIDs[fontNum++];
}

/*   moveCursorFont(uint16_t x, uint16_t y, uint8_t frame)
 *     Moves the cursor to x, y, frame position
 */
void moveCursorFont(uint16_t x, uint16_t y, uint8_t frame)
{
	fontCursor.x = x;
	fontCursor.y = y;
	fontCursor.frame = frame;
}

/*  setScaleFont
 *    Sets cursor's scale
 */
void setScaleFont(uint8_t x, uint8_t y)
{
	fontCursor.scale = (((x<<4)&0xF0)|(y&0x0F));
}

/*   changeColor(uint16_t color)
 *    Changes font color
 */
void changeColorFont(uint16_t color)
{
	fontCursor.color = color;
}

/*   getCursor()
 *     return struct of cursor info
 */
FontCursor getCursor()
{
	return fontCursor;
}
/*   setCursor(Font)
 *     set Cursor to be identical to passed in Cursor
 */
void setCursor(FontCursor f)
{
	fontCursor = f;
}

/* uint16_t writeCharFont(unsigned char c)
 *     Displays char c to the screen
 *     based on the loaded bitmap.
 *     Returns the actual length of the
 *     char for kerning.
 */
uint16_t writeCharFont(unsigned char c)
{
//	int address = FONTADDR +(((c-32)>>4) *(CHARHEIGHT*(fInfo.width>>4))) + ((((c-32)%16)*CHARWIDTH)>>4);
//	int frameAddr = (FRAMEADDRSIZE*fontCursor.frame)+xyLocation(fontCursor.x,fontCursor.y);
//	uint16_t kern = 0;
//	uint16_t row;
//	int i, j;
//
//	for (i=0;i<CHARHEIGHT; ++i){
//		row = IORD( NEW_SDRAM_CONTROLLER_0_BASE, address + i*(fInfo.width>>4) );
//		for (j=0; j<CHARWIDTH; ++j ){
//			if ( (row<<j ) &0x8000){
//				IOWR(NEW_SDRAM_CONTROLLER_0_BASE, frameAddr + xyLocation(j,i), fontCursor.color);
//				if (j > kern)
//					kern = j;
//			}
//		}
//	}
//	return kern;
	return displayFont64Image( c, fontCursor);
}

/* int writeStringFont(char* str, uint8_t isKern)
 *     Writes a string to the screen using
 *     writeCharFont(). isKern determines
 *     whether to kern each character or
 *     not.
 *
 *     return:
 *         Returns number of chars
 *         outputed to the screen.
 */
int writeStringFont(char* str, uint8_t isKern)
{
	uint16_t kern;
	int i=0;

	while (str[i]){
		if (str[i] == '\n'){
			fontCursor.x = 0;
			fontCursor.y += CHARHEIGHT;
		}
		else if (str[i] == '\t'){
			fontCursor.x = CHARWIDTH*4 + (fontCursor.x&0xFC);
		}
		else{
			kern = writeCharFont((unsigned char)str[i]);
			if (kern > 0 && isKern)
				fontCursor.x += kern;
			else
				fontCursor.x += CHARWIDTH;
		}
		if((fontCursor.x+CHARWIDTH) > ROWSIZE){
			fontCursor.y += CHARHEIGHT;
			fontCursor.x = 0;
		}
		++i;
	}
	return i;
}

/* int vprints(const char* fmt, uint8_t isKern, va_list args)
 *     Prints a string with a similar format as
 *     vprintf(). Supports Kerning based on isKern.
 *
 *     escape variables %:
 *         '%':	Display char '%'
 *         'd':	Display arg as a Decimal Int
 *         'x':	Display arg as a lowercase Hex int
 *         'X': Display arg as a uppercase Hex int
 *         'c': Display arg as a char
 *         's': Display arg as a string
 *
 *	   summary:
 *	       Accepts a list of variable args for display.
 *	       supports various escape characters using
 *	       '%' as its escape character. Uses
 *	       writeCharFont() and writeStringFont()
 *	       to display to the screen. If isKern is TRUE
 *	       spacing will be kerned for the string.
 *	       It is recommended to use printg() or
 *	       printk() for follow through use of this
 *	       function.
 *	   returns:
 *	       Returns total ammount of chars/bytes writen to
 *	       the screen.
 */
int vprints(const char* fmt, uint8_t isKern, va_list args)
{
	char buffer[30] = {'\0'};
	uint16_t length = 0;
	uint16_t kern;
	int re=0;
	int	d;

	while (*fmt){

		if ('%' == *fmt){
			if ('.' == *fmt){
				++fmt;
				while (*fmt >= 0x30 && *fmt <= 0x39){
					length *= 10;
					length += (*fmt)-0x30;
					++fmt;
				}
			}
			else
				++fmt;

			switch (*fmt){
				case '%':
					kern = writeCharFont((unsigned char)*fmt);
					++re;
					if (kern > 0 && isKern)
						fontCursor.x += kern;
					else
						fontCursor.x += CHARWIDTH;
					break;
				case 'd':
					d = va_arg( args, int);
					re += writeStringFont( c_itoa(d,buffer,10), isKern);
					break;
				case 'x':
					d = va_arg( args, int);
					re += writeStringFont( c_itoa(d,buffer,16), isKern);
					break;
				case 'X':
					d= va_arg(args, int);
					re += writeStringFont( c_itoa(d,buffer,116), isKern);
					break;
				case 'c':
					buffer[0] = va_arg( args, int);
					kern = writeCharFont((unsigned char)*buffer);
					++re;
					if (kern > 0 && isKern)
						fontCursor.x += kern;
					else
						fontCursor.x += CHARWIDTH;
					break;
				case 's':
					re += writeStringFont( va_arg( args, char*), isKern);
					break;
			 }
		}
		else{
			if (*fmt == '\n'){
				fontCursor.x = 0;
				fontCursor.y += CHARHEIGHT*(fontCursor.scale&0xF);
			}
			else if (*fmt == '\t'){
				fontCursor.x += CHARWIDTH*4;
			}
			else{
				kern = writeCharFont((unsigned char)*fmt);
				if (kern > 0 && isKern)
					fontCursor.x += kern;
				else
					fontCursor.x += CHARWIDTH;
			}
			++re;
		}
		if((fontCursor.x+CHARWIDTH) > ROWSIZE){
			fontCursor.y += CHARHEIGHT*(fontCursor.scale&0xF);
			fontCursor.x = 0;
		}
		++fmt;

	}
	return re;
}
/* printg(const char* fmt, ... )
 *	   Prints a string with a similar format as
 *     printf(). Variable args is used. Displays
 *     using grid spacing.
 *
 *     escape variables %:
 *         '%':	Display char '%'
 *         'd':	Display arg as a Decimal Int
 *         'x':	Display arg as a lowercase Hex int
 *         'X': Display arg as a uppercase Hex int
 *         'c': Display arg as a char
 *         's': Display arg as a string
 *
 *	   summary:
 *	       Accepts a list of variable args for display.
 *	       supports various escape characters using
 *	       '%' as its escape character. Uses vprints()
 *	       and sets kerning FALSE for grid spacing.
 *
 *	   returns:
 *	       Returns total ammount of chars/bytes writen to
 *	       the screen.
 */
int printg(const char* fmt, ... )
{
	va_list args;
	int re;
	va_start( args, fmt );
	re = vprints(fmt,0, args);
	va_end( args );
	return re;
}
/* printk(const char* fmt, ... )
 *	   Prints a string with a similar format as
 *     printf(). Variable args is used. Displays
 *     using grid spacing.
 *
 *     escape variables %:
 *         '%':	Display char '%'
 *         'd':	Display arg as a Decimal Int
 *         'x':	Display arg as a lowercase Hex int
 *         'X': Display arg as a uppercase Hex int
 *         'c': Display arg as a char
 *         's': Display arg as a string
 *
 *	   summary:
 *	       Accepts a list of variable args for display.
 *	       supports various escape characters using
 *	       '%' as its escape character. Uses vprints()
 *	       and sets kerning FALSE for kerned spacing.
 *
 *	   returns:
 *	       Returns total ammount of chars/bytes writen to
 *	       the screen.
 */
int printk(const char* fmt, ... )
{
	va_list args;
	int re;
	va_start( args, fmt );
	re = vprints(fmt,1, args);
	va_end( args );
	return re;
}


