#include "calendar.h"

static uint8_t Cday, Cmonth, Cweekday;
static uint16_t Cyear;

static uint8_t daysInMonth[2][13] = {
		{0,31,28,31,30,31,30,31,31,30,31,30,31},
		{0,31,29,31,30,31,30,31,31,30,31,30,31}
};

char* weekdays[7] = { "Sunday",
					  "Monday",
					  "Tuesday",
					  "Wednesday",
					  "Thursday",
					  "Friday",
					  "Saturday"
};

char* months[12] = { "January",
					 "February",
					 "March",
					 "April",
					 "May",
					 "June",
					 "July",
					 "August",
					 "September",
					 "October",
					 "November",
					 "December"
};

/* isLeapYear
 *   leap year is divisible by 4 and not by 100
 *   Unless divisible by 400
 */
int isLeapYear(uint16_t year)
{
	return ( (!((year)%4) && ((year)%100)) || !((year)%400) );
}

/* dayInYear
 *   Returns the number of days into the year
 */
int dayInYear(uint8_t day, uint8_t month, uint16_t year)
{
	int i, leapYear;

	leapYear = isLeapYear(year);

	for (i = 1; i < month; ++i)
		day += daysInMonth[leapYear][i];
	return day;
}

/* dayInWeek
 *   Returns Index for Day of the week
 *   Does not support pre-Leap year correction
 *   	year 1752 - 0
 */
int dayInWeek(uint8_t day, uint8_t month, uint16_t year)
{
	int temp = (year - 1) * 365 + dayInYear(day, month, year) +
				((year-1)/4) - (((year-1)/100)-17) + (((year-1)-1600)/400);

	return ((temp - 6) % 7)+1;
}

/* getCurrentDate
 *   Returns nonBCD of current date
 *   Uses RTC values then converts them
 */
void getCurrentDate(uint8_t* weekday, uint8_t* day, uint8_t* month, uint16_t* year)
{
	uint8_t temp;
	readDate(weekday, day, month, &temp );
		*year = 0x2000 + temp;

		*year  = convertBCD(*year);
		*month = convertBCD(*month);
		*day   = convertBCD(*day);
}

int displayCal(uint8_t month, uint16_t year, uint8_t frame)
{
	uint8_t weekday;
	uint8_t leapYear = isLeapYear(year);
	int i;
	uint8_t temp;
	FontCursor cursorOld;
	FontCursor cursorNew = {360, 50, frame, WHITE};

	/* Check month is valid */
	if (month < 1 || month > 12)
		return -1;

	/* doesn't support old Calendar */
	if (year < 1753 || year > 9999)
		return -2;

	getCurrentDate(&Cweekday, &Cday, &Cmonth, &Cyear );

	weekday = dayInWeek(1, month, year);



	setCursor(cursorNew);
	printg(" %s ", months[month-1]);

	cursorNew.y += 16;
	cursorNew.x = 22;
	setCursor(cursorNew);
	for (i=0; i< 7; ++i)
	{
		printk("%s\t", weekdays[i]);
		cursorNew.x += 108;
		setCursor(cursorNew);
	}


//	setCursor(cursorNew);
//	changeColorFont(GREY);
//
//	temp = daysInMonth[leapYear][month-1];
//
//	//display days before
//	if (weekday != 1){
//		for (i=weekday-2; i >= 0; --i){
//			printg(" %d ", (temp - i) );
//
//
//		}
//	}
//
//
//	changeColorFont(WHITE);
//	temp = daysInMonth[leapYear][month];
//
//	//display days after
//	for (i=1; i <= temp; ++i){
//		if (month == Cmonth && year == Cyear && Cday == i)
//			changeColorFont(GREEN);
//		else
//			changeColorFont(WHITE);
//
//		printg(" %d ", i);
//
//		if (((weekday+i-1) % 7) == 0){
//			cursorNew.y += 16;
//			setCursor(cursorNew);
//		}
//	}
//
//	setCursor(cursorOld);
	return 0;
}

//IOWR(LCDFRAMEBUFFER_0_BASE, 0, 0);
